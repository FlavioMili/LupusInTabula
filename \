from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler
from classes.enums import GameState
from handlers.gameHandlers import GameHandler
import config

gameHandler = GameHandler()

async def newGame(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id in gameHandler.games:
        await update.message.reply_text("Partita gia' in corso")
        return
    if update.effective_chat.type == 'private':
        await update.message.reply_text("Puoi iniziare una partita solo in un gruppo")
        return
    gameHandler.newGame(chat_id, context.application)
    keyboard = [[InlineKeyboardButton("Partecipa!", callback_data="join")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"Nuova partita iniziata, premi il pulsante per partecipare.\nMin: {config.MIN_GIOCATORI} giocatori, Max: {config.MAX_GIOCATORI} giocatori",
        reply_markup=reply_markup
    )
    gameHandler.games[chat_id].startTimer(gameHandler.games[chat_id].startGame, 0)

async def joinGame(update: Update, context: ContextTypes.DEFAULT_TYPE, from_button=False):
    if from_button:
        query = update.callback_query
        await query.answer()
        chat_id = query.message.chat.id
        user_id = query.from_user.id
        username = query.from_user.username or query.from_user.first_name
    else:
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        username = update.effective_user.username or update.effective_user.first_name
    if chat_id not in gameHandler.games:
        response_text = "Nessuna partita in corso, usa /newgame per iniziarne una"
    else:
        game = gameHandler.games[chat_id]
        if game.state != GameState.WAITING:
            response_text = "La partita e' gia' iniziata"
        elif game.addPlayer(user_id, username):
            response_text = f"@{username} si e' unito al gioco\nGiocatori: {len(game.players)}/10"
        else:
            response_text = f"@{username} non puoi unirti in questo momento."
    if from_button:
        await query.message.chat.send_message(response_text)
    else:
        await update.message.reply_text(response_text)

async def quitGame(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        username = update.effective_user.username or update.effective_user.first_name
    elif update.callback_query:
        query = update.callback_query
        await query.answer()
        chat_id = query.message.chat.id
        user_id = query.from_user.id
        username = query.from_user.username or query.from_user.first_name
    else:
        return  

    if chat_id not in gameHandler.games:
        response_text = "Nessuna partita in corso, usa /newgame per iniziarne una"
    else:
        game = gameHandler.games[chat_id]
        if game.state != GameState.WAITING:
            response_text = "La partita e' gia' iniziata"
        elif game.removePlayer(user_id):
            response_text = f"{username} ha lasciato la partita\nGiocatori: {len(game.players)}/10"
        else:
            response_text = "Non puoi uscire dalla partita"

    if update.message:
        await update.message.reply_text(response_text)
    elif update.callback_query:
        await query.message.chat.send_message(response_text)

    async def forceStartGame(update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        if chat_id not in gameHandler.games:
            await update.message.reply_text("Nessuna partita in corso, usa /newgame per iniziarne una")
            return
        game = gameHandler.games[chat_id]
        if game.state != GameState.WAITING:
            await update.message.reply_text("La partita e' gia' iniziata")
            return
        if len(game.players) < config.MIN_GIOCATORI:
            await update.message.reply_text(f"Non ci sono abbastanza giocatori per iniziare, minimo {config.MIN_GIOCATORI} giocatori richiesti.")
            return
        if game.startGame():
            await update.message.reply_text("Partita avviata!")
        else:
            await update.message.reply_text("Impossibile avviare la partita.")

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await joinGame(update, context, from_button=True)
